
export enum MONITORING_STATE {
  NOT_READY = 0,
  STARTUP = 1,
  READY = 2,
  UPDATING_CONFIG = 3,
  INVALID_CONFIG = 4,
  ARMED = 5,
  SABOTAGE = 6,
  ERROR = 7
}

// monitoring system states from the backend
const MONITORING_STARTUP = 'monitoring_startup';
const MONITORING_READY = 'monitoring_ready';
const MONITORING_UPDATING_CONFIG = 'monitoring_updating_config';
const MONITORING_INVALID_CONFIG = 'monitoring_invalid_config';
const MONITORING_ARMED = 'monitoring_armed';
const MONITORING_SABOTAGE = 'monitoring_sabotage';
const MONITORING_ERROR = 'monitoring_error';


export const string2MonitoringState = (systemState: string): MONITORING_STATE => ({
  MONITORING_STARTUP: MONITORING_STATE.STARTUP,
  MONITORING_READY: MONITORING_STATE.READY,
  MONITORING_UPDATING_CONFIG: MONITORING_STATE.UPDATING_CONFIG,
  MONITORING_INVALID_CONFIG: MONITORING_STATE.INVALID_CONFIG,
  MONITORING_ARMED: MONITORING_STATE.ARMED,
  MONITORING_SABOTAGE: MONITORING_STATE.SABOTAGE,
  MONITORING_ERROR: MONITORING_STATE.ERROR,
})[systemState];


export const monitoringState2String = (systemState: MONITORING_STATE): string => ({
  STARTUP: MONITORING_STARTUP,
  READY: MONITORING_READY,
  UPDATING_CONFIG: MONITORING_UPDATING_CONFIG,
  INVALID_CONFIG: MONITORING_INVALID_CONFIG,
  ARMED: MONITORING_ARMED,
  SABOTAGE: MONITORING_SABOTAGE,
  ERROR: MONITORING_ERROR
})[systemState];

export class Clocks {
  system: string;
  network: string;
  timezone: string;
}
