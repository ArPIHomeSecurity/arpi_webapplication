
export enum MONITORING_STATE {
  NOT_READY = 0,
  STARTUP = 1,
  READY = 2,
  UPDATING_CONFIG = 3,
  INVALID_CONFIG = 4,
  ARM_DELAY = 5,
  ARMED = 6,
  ALERT_DELAY = 7,
  ALERT = 8,
  SABOTAGE = 9,
  ERROR = 10
}

// monitoring system states from the backend
const MONITORING_STARTUP = 'monitoring_startup';
const MONITORING_READY = 'monitoring_ready';
const MONITORING_UPDATING_CONFIG = 'monitoring_updating_config';
const MONITORING_INVALID_CONFIG = 'monitoring_invalid_config';
const MONITORING_ARM_DELAY = 'monitoring_arm_delay';
const MONITORING_ALERT_DELAY = 'monitoring_alert_delay';
const MONITORING_ALERT = 'monitoring_alert';
const MONITORING_ARMED = 'monitoring_armed';
const MONITORING_SABOTAGE = 'monitoring_sabotage';
const MONITORING_ERROR = 'monitoring_error';


export const string2MonitoringState = (systemState: string): MONITORING_STATE => ({
  [MONITORING_STARTUP]: MONITORING_STATE.STARTUP,
  [MONITORING_READY]: MONITORING_STATE.READY,
  [MONITORING_UPDATING_CONFIG]: MONITORING_STATE.UPDATING_CONFIG,
  [MONITORING_INVALID_CONFIG]: MONITORING_STATE.INVALID_CONFIG,
  [MONITORING_ARM_DELAY]: MONITORING_STATE.ARM_DELAY,
  [MONITORING_ARMED]: MONITORING_STATE.ARMED,
  [MONITORING_ALERT_DELAY]: MONITORING_STATE.ALERT_DELAY,
  [MONITORING_ALERT]: MONITORING_STATE.ALERT,
  [MONITORING_SABOTAGE]: MONITORING_STATE.SABOTAGE,
  [MONITORING_ERROR]: MONITORING_STATE.ERROR,
})[systemState as keyof typeof string2MonitoringState];


export const monitoringState2String = (systemState: MONITORING_STATE): string => ({
  [MONITORING_STATE.STARTUP]: MONITORING_STARTUP,
  [MONITORING_STATE.READY]: MONITORING_READY,
  [MONITORING_STATE.UPDATING_CONFIG]: MONITORING_UPDATING_CONFIG,
  [MONITORING_STATE.INVALID_CONFIG]: MONITORING_INVALID_CONFIG,
  [MONITORING_STATE.ARM_DELAY]: MONITORING_ARM_DELAY,
  [MONITORING_STATE.ARMED]: MONITORING_ARMED,
  [MONITORING_STATE.ALERT_DELAY]: MONITORING_ALERT_DELAY,
  [MONITORING_STATE.ALERT]: MONITORING_ALERT,
  [MONITORING_STATE.SABOTAGE]: MONITORING_SABOTAGE,
  [MONITORING_STATE.ERROR]: MONITORING_ERROR
})[systemState];

export class Clocks {
  system: string;
  network: string;
  timezone: string;
}
