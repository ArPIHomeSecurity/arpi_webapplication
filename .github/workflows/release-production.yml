# Release Production Workflow
# This workflow automates the release process for the production build which is
# used in the live environment on the raspberry pi.
# The workflow will bump the version, and create a new release with the build artifacts.
name: Release Production

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - pre-release
      pre_release:
        description: 'Pre-release identifier (optional, e.g., "beta", "rc1")'
        required: false
        type: string
      release_notes:
        description: "Release notes / What's Changed (optional)"
        required: false
        type: string

jobs:
  release:
    name: Release application
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository 🛎️
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js 🔧
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python for version bumping 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Configure Git 🔧
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies 📦
        run: |
          npm ci
          npm install -g @angular/cli

      - name: Bump version 🏷️
        run: |
          if [ "${{ inputs.version_type }}" = "pre-release" ]; then
            python scripts/bump_version.py -p "${{ inputs.pre_release }}" -v
          else
            python scripts/bump_version.py -t ${{ inputs.version_type }} -v
          fi

      - name: Get new version 📋
        id: get_version
        run: |
          VERSION=$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+[^"]*' src/app/version.ts | head -1)
          VERSION_SIMPLE=$(echo "$VERSION" | sed 's/:.*//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "simple_version=$VERSION_SIMPLE" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"
          echo "Base version: $VERSION_SIMPLE"

      - name: Update package.json version 📝
        run: |
          VERSION_NUMBER=$(echo "${{ steps.get_version.outputs.version }}" | sed 's/^v//' | sed 's/:.*//')
          npm version $VERSION_NUMBER --no-git-tag-version

      - name: Commit version changes 💾
        run: |
          git add src/app/version.ts package.json android/app/build.gradle
          git commit -m "Github Actions: bump version to ${{ steps.get_version.outputs.version }}"

      - name: Create Git tag 🏷️
        run: |
          git tag $(echo '${{ steps.get_version.outputs.simple_version }}') -m "Release ${{ steps.get_version.outputs.version }}"

      - name: Build production application 🏗️
        run: |
          ng build --configuration=production --localize
          tar -czf arpi-webapplication-$(echo "${{ steps.get_version.outputs.simple_version }}").tar.gz --directory=dist-production/browser .

      - name: Run tests 🧪
        run: |
          npm run test:ci

      - name: Push changes and tags 🚀
        run: |
          git push origin master
          git push origin ${{ steps.get_version.outputs.simple_version }}

      - name: Create GitHub Release 📦
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.simple_version }}
          name: Release ${{ steps.get_version.outputs.simple_version }}
          draft: false
          prerelease: ${{ inputs.version_type == 'pre-release' }}
          generate_release_notes: true
          files: |
            arpi-webapplication-${{ steps.get_version.outputs.simple_version }}.tar.gz
          body: |
            ## What's Changed

            ${{ inputs.release_notes || 'This release includes the latest changes from the master branch.' }}

            ### Installation

            Download the `arpi-webapplication-${{ steps.get_version.outputs.version }}.tar.gz` file and extract it to your web server directory.

            ### Build Information
            - **Version**: ${{ steps.get_version.outputs.version }}
            - **Branch**: ${{ github.ref_name }}
            - **Build Date**: ${{ github.run_started_at }}
            - **Commit**: ${{ github.sha }}
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
